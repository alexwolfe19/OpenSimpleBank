// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Identity Stuff
model UserAccount {
  id           Int     @id @default(autoincrement())
  username     String  @unique
  createdOn DateTime @default(now())
  email        String?
  passwordHash String

  // Virtual
  WalletLinks WalletRelation[]
  Currencies  Currency[]
  Tokens Token[]
  Sessions Session[]
}

// Sessions - They're used for tracking/identitifcation IN THE BROWSER! Like tokens, but lame.
model Session {
  id               Int         @id @default(autoincrement())
  key           String      @unique
  tokenId          String?
  userId          Int?

  createdOn       DateTime @default(now())
  expiredOn       DateTime?

  revoked Boolean @default(false)

  // Virtual
  Token Token? @relation(fields: [tokenId], references: [identity])
  User UserAccount? @relation(fields: [userId], references: [id])
  Data SessionStorageEntry[]
  HTTPRecords HTTPLogEntry[]
}

model SessionStorageEntry {
  sessionKey String
  key String
  body Json? 

  @@unique([sessionKey, key])

  // Virtual
  Session Session @relation(fields: [sessionKey], references: [key])
}

model Token {
  identity         String  @id @default(uuid())
  userId      Int?
  applicationId Int?

  secretHash           String

  createdOn DateTime    @default(now())
  expiresOn DateTime?

  revoked          Boolean     @default(false)
  authenticated    Boolean     @default(false)

  // Virtual
  User UserAccount? @relation(fields: [userId], references: [id])
  Application Application? @relation(fields: [applicationId], references: [id])
  Sessions Session[]
}

model Application {
  id       Int @id @default(autoincrement())
  masterId Int

  // Virtual
  Memberships ApplicationMembership[]
  Tokens Token[]
}

model ApplicationMembership {
  applicationId Int
  userId        Int

  @@unique([applicationId, userId])

  // Virtual
  Application   Application @relation(fields: [applicationId], references: [id])
}

// Log Stuff
enum LogLevel {
  Info
  Debug
  Log
  Warn
  Error
  Fatal
}

model HTTPLogEntry {
  id       Int @id @default(autoincrement())
  timestamp DateTime @default(now())
  actorToken String?

  remoteAddress String?
  path String?

  // Virtual
  Session Session? @relation(fields: [actorToken], references: [key])
}

model APIEventLog {
  id       Int @id @default(autoincrement())
  timestamp DateTime @default(now())
  identity  String?
  module String? @default("general")
  eventType String?
  eventData Json?
  success Boolean @default(true)
}

// Finance Stuff
model WalletRelation {
  id                        Int     @id @default(autoincrement())
  accountId                 Int
  walletKey                 String
  mayViewBalance            Boolean @default(true)
  mayViewTransactionHistory Boolean @default(true)
  mayAuthorNewTransactions  Boolean @default(true)
  mayAddNewUser             Boolean @default(true)
  mayRemoveUser             Boolean @default(true)
  mayDeleteAccount          Boolean @default(true)
  canRelationBeDeleted      Boolean @default(true)

  // Virtual
  Account UserAccount @relation(fields: [accountId], references: [id])
  Wallet  Wallet      @relation(fields: [walletKey], references: [id])
}

model Wallet {
  id         String  @id @default(uuid())
  balance    Int     @default(0)
  masterId   Int
  currencyId String
  nickname   String?

  // Virtual
  Debits   Transaction[]    @relation("debits")
  Credits  Transaction[]    @relation("credits")
  Owners   WalletRelation[]
  Currency Currency         @relation(fields: [currencyId], references: [id])
}

model Transaction {
  id                String            @id @default(uuid())
  debtorId          String?
  creditorId        String?
  value             Int               @default(0)
  partialValue      Int?
  status            TransactionStatus @default(CREATED)
  createdOn         DateTime          @default(now())
  lastUpdatedOn     DateTime          @default(now())
  debtorHeadline    String?
  debtorDescription String?

  // Virtual
  DebtorWallet   Wallet? @relation(fields: [debtorId], references: [id], "debits")
  CreditorWallet Wallet? @relation(fields: [creditorId], references: [id], "credits")
}

enum TransactionStatus {
  CREATED
  EXPIRED
  PROCESS_PENDING
  PROCESSED
  PROCESS_FAILED
  REFUND_PENDING
  REFUND_PARTIAL
  REFUNDED
  REFUND_FAILED
  CHARGED_BACK
  PARTIAL_CHARGE_BACK
}

model Currency {
  id      String @id @default(uuid())
  ownerId Int

  currencySign String
  groupingSize Int
  decimalCount Int
  shortName    String
  longName     String

  volume    Int @default(0)
  liquidity Int @default(0)

  // Owner
  Owner        UserAccount @relation(fields: [ownerId], references: [id])
  WalletsUsing Wallet[]
}

enum Permissions {
  // Account
  ACCOUNT_LOGIN
  ACCOUNT_CREATE
  ACCOUNT_FORGET_PASSWORD
  ACCOUNT_LIST_ALL

  // Account/Token
  ACCOUNT_TOKENS_LIST
  ACCOUNT_TOKENS_CREATE
  ACCOUNT_TOKENS_DELETE
  ACCOUNT_TOKENS_DELETE_ALL
  ACCOUNT_TOKENS_MODIFY
  ACCOUNT_TOKENS_MODIFY_ALL

  // Account/set
  ACCOUNT_SET_ALL
  ACCOUNT_SET_USERNAME
  ACCOUNT_SET_PASSWORD

  // Account/get
  ACCOUNT_GET_ALL
  ACCOUNT_GET_USERNAME

  // Session
  SESSION_LIST
  SESSION_VIEW
  SESSION_VIEW_ALL
  SESSION_DELETE
  SESSION_DELETE_ALL
  
  // Currency
  CURRENCY_CREATE
  CURRENCY_DISTROY
  

  // Currency/List
  CURRENCY_LIST
  CURRENCY_LIST_PUBLIC

  // Currency/Info
  CURRENCY_INFO_READ_BASIC
  CURRENCY_INFO_READ_FORMATTING
  CURRENCY_INFO_READ_VOLUME
  CURRENCY_INFO_READ_LIQUIDITY

  CURRENCY_INFO_WRITE_FORMATTING
  CURRENCY_INFO_WRITE_VOLUME
  CURRENCY_INFO_WRITE_VOLUME_IGNORELIMITS

  CURRENCY_ADMIN_LIST
  CURRENCY_ADMIN_ADD
  CURRENCY_ADMIN_REMOVE

  CURRENCY_PAYOUT

  // Application
  APPLICATION_CREATE
  APPLICATION_LIST
  APPLICATION_LIST_PUBLIC
  APPLICATION_DELETE
  APPLICATION_DELETE_ALL

  APPLICATION_TOKEN_READ_INFO
  APPLICATION_TOKEN_LIST
  APPLICATION_TOKEN_CREATE
  APPLICATION_TOKEN_DELETE
  
  APPLICATION_INFO_READ_NAME
  APPLICATION_INFO_READ_DESCRIPTION
  APPLICATION_INFO_READ_IMAGE_URI
  APPLICATION_INFO_WRITE_NAME
  APPLICATION_INFO_WRITE_DESCRIPTION
  APPLICATION_INFO_WRITE_IMAGE_URI

  // Transactions
  TRANSACTION_LIST
  TRANSACTION_CREATE

  TRANSACTION_INFO_READ_DEBTOR
  TRANSACTION_INFO_READ_CREDITOR
  TRANSACTION_INFO_READ_VALUE
  TRANSACTION_INFO_READ_PARTIAL_VALUE
  TRANSACTION_INFO_READ_STATUS
  TRANSACTION_INFO_READ_CREATION_TIMESTAMP
  TRANSACTION_INFO_READ_UPDATE_TIMESTAMP
  TRANSACTION_INFO_READ_HEADLINE
  TRANSACTION_INFO_READ_DESCRIPTION

  // Wallets
  WALLET_LIST
  WALLET_CREATE
  WALLET_DELETE
  WALLET_MEMBER_LIST
  WALLET_MEMBER_REMOVE
  WALLET_MEMBER_ADD
  WALLET_MEMBER_LIST_PERMS
  WALLET_MEMBER_CHANGE_PERMS
}